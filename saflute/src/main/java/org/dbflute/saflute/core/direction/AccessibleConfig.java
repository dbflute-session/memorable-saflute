/*
 * Copyright 2014-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.dbflute.saflute.core.direction;

import java.math.BigDecimal;
import java.util.Date;

import org.dbflute.util.DfTypeUtil.ParseDateException;
import org.dbflute.util.DfTypeUtil.ParseDateNumberFormatException;
import org.dbflute.util.DfTypeUtil.ParseDateOutOfCalendarException;

/**
 * The basic interface of (accessible) configuration. <br>
 * This interface has basic access methods of configuration.
 * However you should not use the methods directly.
 * Instead you should use type-safe methods auto-generated by FreeGen. <br>
 * This is basically for injection in unified provider.
 * @author jflute
 */
public interface AccessibleConfig {

    /**
     * Get the value of property as {@link String}.
     * @param propertyKey The key of the property. (NotNull)
     * @return The value of found property. (NullAllowed: if null, not found)
     */
    String get(String propertyKey);

    /**
     * Get the value of property as {@link Integer}.
     * @param propertyKey The key of the property. (NotNull)
     * @return The value of found property. (NullAllowed: if null, not found)
     * @throws NumberFormatException When the property is not integer.
     */
    Integer getAsInteger(String propertyKey);

    /**
     * Get the value of property as {@link Long}.
     * @param propertyKey The key of the property. (NotNull)
     * @return The value of found property. (NullAllowed: if null, not found)
     * @throws NumberFormatException When the property is not long.
     */
    Long getAsLong(String propertyKey);

    /**
     * Get the value of property as {@link BigDecimal}.
     * @param propertyKey The key of the property. (NotNull)
     * @return The value of found property. (NullAllowed: if null, not found)
     * @throws NumberFormatException When the property is not decimal.
     */
    BigDecimal getAsDecimal(String propertyKey);

    /**
     * Get the value of property as {@link Date}.
     * @param propertyKey The key of the property. (NotNull)
     * @return The value of found property. (NullAllowed: if null, not found)
     * @throws ParseDateException When it failed to parse the string to date.
     * @throws ParseDateNumberFormatException When it failed to format the elements as number.
     * @throws ParseDateOutOfCalendarException When the date was out of calendar. (if BC, not thrown)
     */
    Date getAsDate(String propertyKey);

    /**
     * Is the property true?
     * @param propertyKey The key of the property which is boolean type. (NotNull)
     * @return The determination, true or false. (if the property can be true, returns true)
     */
    boolean is(String propertyKey);
}
